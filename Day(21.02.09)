* 문제 설명
전체 스테이지의 개수 N, 게임을 이용하는 사용자가 현재 멈춰있는 스테이지의 번호가 담긴 배열 stages가 매개변수로 주어질 때, 실패율이 높은 스테이지부터 내림차순으로 스테이지의 번호가 담겨있는 배열을 return 하도록 solution 함수를 완성하라.

* 제한사항
스테이지의 개수 N은 1 이상 500 이하의 자연수이다.
stages의 길이는 1 이상 200,000 이하이다.
stages에는 1 이상 N + 1 이하의 자연수가 담겨있다.
각 자연수는 사용자가 현재 도전 중인 스테이지의 번호를 나타낸다.
단, N + 1 은 마지막 스테이지(N 번째 스테이지) 까지 클리어 한 사용자를 나타낸다.
만약 실패율이 같은 스테이지가 있다면 작은 번호의 스테이지가 먼저 오도록 하면 된다.
스테이지에 도달한 유저가 없는 경우 해당 스테이지의 실패율은 0 으로 정의한다.

--------------------------------------------------------------------------

class Solution {
    public int[] solution(int N, int[] stages) {
        
        double nfail[] = new double[N];
        int count = 0;      // 스테이지에 도달했으나 클리어하지 못한 플레이어 수
        int pcount = stages.length;     // 스테이지에 도달한 플레이어 수

        for (int i = 1; i <= N; i++) {
            for (int j = 0; j < stages.length; j++) {
                if(stages[j] == i) {     // 도달은 했지만 못깬사람
                    count += 1;
                }

            }
            nfail[i-1] = (double)count / (double)pcount;    // 각 스테이지의 실패율
            pcount -= count;
            
            if(count == 0) {
                nfail[i-1] = 0;
            }

            System.out.println("p : " + pcount);
            System.out.println("c : " + count);
            System.out.println(nfail[i-1]);
            System.out.println("-------------");
            count = 0;
        }
        
        int[] answer = new int[N];
        
        for(int k = 0; k < nfail.length; k++) {
            double max = -1;
            int index = 0;
            
            for(int s = 0; s < nfail.length; s++) {
                if(max < nfail[s]) {
                    max = nfail[s];
                    index = s;
                }
            }
            nfail[index] = -1;
            answer[k] = index + 1;
            
            System.out.println(answer[k]);
        }

        return answer;
    }
}
